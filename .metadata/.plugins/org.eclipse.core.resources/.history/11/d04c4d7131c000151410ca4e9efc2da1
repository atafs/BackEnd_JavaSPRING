package aspect;

import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;

@Aspect
public class LoggingAspect {
	
	//POINTCUTS: call these methods
	@Before("allGetters()")
	public void loggingAdvice() {
		System.out.println("ADVICE RUN POINTCUTS... GET METHOD CALLED!!");
	}
	@Before("allGetters()")
	public void secondAdvice() {
		System.out.println("ADVICE RUN SECOND... GET METHOD CALLED!!");
	}
	
	@Before("allCircleMethods()")
	public void circleMethodsAdvice() {
		System.out.println("ADVICE RUN CIRCLE... GET METHOD CALLED!!");
	}
	
	@Before("allMethods()")
	public void allMethodsAdvice() {
		System.out.println("ADVICE RUN CLASSES AND SUBCLASSES... GET METHOD CALLED!!");
	}
	
	//POINTCUTS: is a specific REGEX
	// ex: "execution(public * get*(..))"
	@Pointcut("execution(* get*())")
	public void allGetters() {}
	
	//WITHIN METHOD
	@Pointcut("within(model.Circle)")
	public void allCircleMethods() {}
	
	//ALL CLASSES AND SUBCLASSES IN MODEL PACKAGE
	@Pointcut("within(model..*)")
	public void allMethods() {}
	
	/* OR ############################################ */
	
	//WILDCARDS: any return type, starts with get:
	// *  = one args; 
	// .. = zero or more args
//	@Before("execution(public * get*(..))")
//	public void LoggingAdvice() {
//		System.out.println("ADVICE RUN WILDCARD... GET METHOD CALLED!!");
//	}
//	
//	@Before("execution(public String getName())")
//	public void LoggingAdvice() {
//		System.out.println("ADVICE RUN CIRCLE... GET METHOD CALLED!!");
//	}
	
	/* OR ############################################ */
	
//	@Before("execution(public String model.Circle.getName())")
//	public void LoggingAdviceCir() {
//		System.out.println("ADVICE RUN CIRCLE... GET METHOD CALLED!!");
//	}
//	
//	@Before("execution(public String model.Triangle.getName())")
//	public void LoggingAdviceTri() {
//		System.out.println("ADVICE RUN TRIANGLE... GET METHOD CALLED!!");
//	}

}
